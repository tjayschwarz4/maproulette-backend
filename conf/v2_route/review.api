###
# tags: [ Review ]
# summary: Retrieves and claims a review needed Task
# description: Retrieves a Task and claims that task for review
# responses:
#   '200':
#     description: The task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task to fetch and claim
###
GET     /task/:id/review/start                       @org.maproulette.framework.controller.TaskReviewController.startTaskReview(id:Long)
###
# tags: [ Review ]
# summary: Cancels a claim on a task for review
# description: Cancels a claim on a task for review
# responses:
#   '200':
#     description: The task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task to cancel claim on
###
GET     /task/:id/review/cancel                       @org.maproulette.framework.controller.TaskReviewController.cancelTaskReview(id:Long)
###
# tags: [ Review ]
# summary: Retrieves tasks that need review
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of tasks that need review (and that the user has group permission to access)
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is -1 (all).
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: includeTags
#     in: query
#     description: In response include list of tags for each task
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
###
PUT     /tasks/review                          @org.maproulette.framework.controller.TaskReviewController.getReviewRequestedTasks(onlySaved: Boolean ?= false, limit:Int ?= -1, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC", excludeOtherReviewers: Boolean ?= false, includeTags: Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves reviewed tasks that have been reviewed either by this user or where the user requested
#          the review.
# description: Retrieves list of Tasks
# responses:
#   '200':
#     description: The list of tasks and total count
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: mappers
#     in: query
#     description: The mapper ids to search by. (review_requested_by)
#   - name: reviewers
#     in: query
#     description: The reviewer ids to search by. (review_requested_by)
#     in: query
#     description: Whether results should be included tasks in tasks 'review requested'
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is -1 (all).
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
#   - name: r
#     in: query
#     description: The search string used to match the Reviewer names. (reviewed_by)
#   - name: includeTags
#     in: query
#     description: In response include list of tags for each task
#   - name: asMetaReview
#     in: query
#     description: Limit response to include tasks ready for meta review (already review approved/assisted)
###
PUT     /tasks/reviewed                          @org.maproulette.framework.controller.TaskReviewController.getReviewedTasks(allowReviewNeeded:Boolean ?= false, limit:Int ?= 10, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC", includeTags:Boolean ?= false, asMetaReview: Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves and claims a the next review needed Task
# description: Retrieves the next Task (given the search parameters) and claims that task for review
# responses:
#   '200':
#     description: The task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: lastTaskId
#     in: query
#     description: Fetch the next task after the lastTaskId. (so if you want to 'skip' a task you can get the next one)
#   - name: asMetaReview
#     in: query
#     description: Fetch the next task for a meta review.
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
#   - name: r
#     in: query
#     description: The search string used to match the Reviewer names. (reviewed_by)
###
GET     /tasks/review/next                       @org.maproulette.framework.controller.TaskReviewController.nextTaskReview(onlySaved:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", lastTaskId:Long ?= -1, excludeOtherReviewers:Boolean ?= false, asMetaReview: Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves nearby Tasks
# description: Retrieves review tasks geographically closest to the specified task within the given filters
# responses:
#   '200':
#     description: The list of geographically closest review tasks
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 5.
#   - name: proximity
#     in: query
#     description: Id of task around which geographically closest tasks are desired
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
###
GET     /tasks/review/nearby/:proximityId           @org.maproulette.framework.controller.TaskReviewController.getNearbyReviewTasks(proximityId:Long, limit:Int ?= 5, excludeOtherReviewers:Boolean ?= false, onlySaved:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves tasks that need review
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of tasks that need review (and that the user has group permission to access)
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: mappers
#     in: query
#     description: the mapper ids to search by (review_requested_by)
#   - name: reviewers
#     in: query
#     description: the reviewer ids to search by (reviewed_by)
#   - name: priorities
#     in: query
#     description: the priorities to search by
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: includeByPriority
#     in: query
#     description: Also include a breakdown of review status by priority
#   - name: includeByTaskStatus
#     in: query
#     description: Also include a breakdown of review status by task status
###
GET     /tasks/review/metrics                          @org.maproulette.framework.controller.TaskReviewMetricsController.getReviewMetrics(reviewTasksType: Int, onlySaved:Boolean ?= false, excludeOtherReviewers: Boolean ?= false, includeByPriority:Boolean ?= false, includeByTaskStatus:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves task review clusters
# description: Retrieves task clusters that contain the centroid location for a group of review tasks
# responses:
#   '200':
#     description: An array of task clusters that represents clusters of tasks for the review criteria. If none found will return an empty list
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.TaskCluster'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
#   - name: startDate
#     in: query
#     description: The start date to search within
#   - name: endDate
#     in: query
#     description: The end date to search within
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
###
GET     /taskCluster/review                                @org.maproulette.framework.controller.TaskReviewController.getReviewTaskClusters(reviewTasksType:Int, points:Int ?= 100, onlySaved:Boolean ?= false, excludeOtherReviewers:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieve a summary of review coverage for mappers
# description: This will retrieve a summary of review coverage for each mapper and respond with a csv
# responses:
#   '200':
#     description: A CSV file containing the following data "Mapper,Requested,Approved,Rejected,ApprovedWithFixes,Disputed,Total"
# parameters:
#   - name: mappers
#     in: query
#     description: the mapper ids to search by (review_requested_by)
#   - name: reviewers
#     in: query
#     description: the reviewer ids to search by (reviewed_by)
#   - name: priorities
#     in: query
#     description: the priorities to search by
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
###
GET     /tasks/review/mappers/export                          @org.maproulette.framework.controller.TaskReviewMetricsController.extractMapperMetrics(onlySaved:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieve a summary of review coverage for review related tasks
# description: This will retrieve a summary of review coverage for each review related task and respond with a csv
# response:
#   '200':
#     description: A CSV file containing the following data "Internal Id,Review Status,Mapper,Challenge,Project,Mapped On,Reviewer,Reviewed On,Status,Priority,Actions,Additional Reviewers"
# parameters:
#  - name: taskId
#    in: query
#    description: Reviews to equivalent taskId. Example (Int) - 14
#  - name: reviewStatus
#    in: query
#    description: Reviews to equivalent reviewStatus. Available Values - 0,1,2,3,4,5,6,7,-1
#  - name: mapper
#    in: query
#    description: Reviews to equivalent mapper. Example (String) - Username123
#  - name: challengeId
#    in: query
#    description: Reviews to equivalent challengeId. Example (Int)'s (no spaces) - 23,45,1,12
#  - name: projectId
#    in: query
#    description: Reviews to equivalent projectId. Example (Int) - 12
#    required: true
#  - name: mappedOn
#    in: query
#    description: Reviews to equivalent mappedOn. format - YYYY-MM-DD
#  - name: reviewedBy
#    in: query
#    description: Reviews to equivalent reviewedBy. Example - Username567
#  - name: reviewedAt
#    in: query
#    description: Reviews to equivalent reviewedAt. format - YYYY-MM-DD
#  - name: metaReviewedBy
#    in: query
#    description: Reviews to equivalent metaReviewedBy. Example - Username987
#  - name: metaReviewStatus
#    in: query
#    description: Reviews to equivalent metaReviewStatus. Available Values - 2,0,1,2,3,6
#  - name: status
#    in: query
#    description: Reviews to equivalent status. Available Values - 0,1,2,3,4,5,6,9
#  - name: priority
#    in: query
#    description: Reviews to equivalent priority. Available Values - 0,1,2
#  - name: tagFilter
#    in: query
#    description: Reviews to equivalent tagFilter. Example - Geometries
#  - name: sortBy
#    in: query
#    description: Reviews to equivalent sortBy. (You must pick only one) Available Values - Internal Id,Review Status,Mapper,Challenge,Project,Mapped On,Reviewer,Reviewed On,Status,Priority,Actions,Additional Reviewers
#    required: true
#  - name: direction
#    in: query
#    description: Sort order direction. Either ASC or DESC.
#    required: true
#  - name: displayedColumns
#    in: query
#    description: Reviews to equivalent displayedColumns. Available Values - Internal Id,Review Status,Mapper,Challenge,Project,Mapped On,Reviewer,Reviewed On,Status,Priority,Actions,Additional Reviewers
#  - name: invertedFilters
#    in: query
#    description: Reviews to equivalent invertedFilters. Available Values - cid,priorities,pid,m,trStatus,r,tStatus
#  - name: onlySaved
#    in: query
#    description: Reviews to equivalent onlySaved.
###
GET     /tasks/review/reviewTable/export              @org.maproulette.framework.controller.TaskReviewController.extractReviewTableData(taskId: String ?= "", reviewStatus: String ?= "0,1,2,3,4,5,6,7,-1", mapper: String ?= "", challengeId: String ?= "", projectId: String ?= "", mappedOn: String ?= "", reviewedBy: String ?= "", reviewedAt: String ?= "", metaReviewedBy: String ?= "", metaReviewStatus: String ?= "2,0,1,2,3,6", status: String ?= "0,1,2,3,4,5,6,9", priority: String ?= "0,1,2", tagFilter: String ?= "", sortBy: String ?= "mapped_on", direction: String ?= "ASC", displayedColumns: String ?= "Internal Id,Review Status,Mapper,Challenge,Project,Mapped On,Reviewer,Reviewed On,Status,Priority,Actions,Additional Reviewers", invertedFilters: String ?= "", onlySaved: Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieve a summary of meta-review coverage for reviewers
# description: This will retrieve a summary of meta-review coverage for each reviewer and respond with a csv
# responses:
#   '200':
#     description: A CSV file containing the following data "Reviewer,Re-ReviewNeeded,Approved,Rejected,ApprovedWithFixes,Total"
# parameters:
#   - name: reviewers
#     in: query
#     description: the reviewer ids to search by (reviewed_by)
#   - name: priorities
#     in: query
#     description: the priorities to search by
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
###
GET     /tasks/metareview/reviewers/export                          @org.maproulette.framework.controller.TaskReviewMetricsController.extractMetaReviewCoverage(onlySaved:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves metrics grouped by tag
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of review metrics by tag
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.ReviewMetrics'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
###
GET     /tasks/review/tag/metrics                          @org.maproulette.framework.controller.TaskReviewMetricsController.getReviewTagMetrics(reviewTasksType: Int, onlySaved:Boolean ?= false, excludeOtherReviewers: Boolean ?= false)